// Generated by CoffeeScript 1.7.1
(function() {
  var deepMerge, isArray;

  deepMerge = require('./deep_merge');

  isArray = Array.isArray;

  module.exports = {
    create: function(inputData, onChange, historySize) {
      var Cursor, data, redo, redos, undo, undos, update;
      if (historySize == null) {
        historySize = 100;
      }
      data = inputData;
      undos = [];
      redos = [];
      Cursor = (function() {
        function Cursor(path) {
          this.path = path != null ? path : [];
        }

        Cursor.prototype.cursor = function(path) {
          if (path == null) {
            path = [];
          }
          return new Cursor(this.path.concat(path));
        };

        Cursor.prototype.get = function(path) {
          var key, target, _i, _len, _ref;
          if (path == null) {
            path = [];
          }
          target = data;
          _ref = this.path.concat(path);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            key = _ref[_i];
            target = target[key];
            if (target == null) {
              return void 0;
            }
          }
          return target;
        };

        Cursor.prototype.set = function(path, value, silent) {
          var fullPath, k, key, newData, target, updated, v, _i, _len, _ref, _ref1;
          if (silent == null) {
            silent = false;
          }
          fullPath = this.path.concat(path);
          newData = target = {};
          for (k in data) {
            v = data[k];
            target[k] = v;
          }
          _ref = fullPath.slice(0, -1);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            key = _ref[_i];
            updated = isArray(target[key]) ? [] : {};
            _ref1 = target[key];
            for (k in _ref1) {
              v = _ref1[k];
              updated[k] = v;
            }
            target = target[key] = updated;
          }
          target[fullPath.slice(-1)] = value;
          return update(newData, silent);
        };

        Cursor.prototype.merge = function(data, silent) {
          return this.set([], deepMerge(this.get(), data), silent);
        };

        Cursor.prototype.bind = function(path, pre) {
          return (function(_this) {
            return function(v, silent) {
              return _this.set(path, (pre ? pre(v) : v), silent);
            };
          })(this);
        };

        return Cursor;

      })();
      undo = function() {
        if (!(undos.length > 0)) {
          return;
        }
        redos.push(data);
        if (redos.length > historySize) {
          redos.shift();
        }
        data = undos.pop();
        return onChange(new Cursor(), undo, redo);
      };
      redo = function() {
        if (!(redos.length > 0)) {
          return;
        }
        undos.push(data);
        if (undos.length > historySize) {
          undos.shift();
        }
        data = redos.pop();
        return onChange(new Cursor(), undo, redo);
      };
      update = function(newData, silent) {
        if (silent == null) {
          silent = false;
        }
        if (!silent) {
          undos.push(data);
          if (undos.length > historySize) {
            undos.shift();
          }
        }
        data = newData;
        return onChange(new Cursor(), undo, redo);
      };
      return onChange(new Cursor(), undo, redo);
    }
  };

}).call(this);
